globals:
  - id: position_to_move_servo_to
    type: float
    initial_value: '0'
  - id: servo_distance_to_move
    type: float
    initial_value: '0.01'

  - id: previous_potentiometer_value1
    type: float
    initial_value: '0'
  - id: previous_potentiometer_value2
    type: float
    initial_value: '0'
  - id: previous_potentiometer_value3
    type: float
    initial_value: '0'
  - id: upper_previous_potentiometer_value2
    type: float
  - id: lower_previous_potentiometer_value2
    type: float
  - id: upper_previous_potentiometer_value3
    type: float
  - id: lower_previous_potentiometer_value3
    type: float

  - id: max_closed_position
    type: float
    initial_value: '1'
  - id: max_opened_position
    type: float
    initial_value: '-1'
  - id: original_max_closed_position
    type: float
    initial_value: '1'
  - id: original_max_opened_position
    type: float
    initial_value: '-1'

  - id: closed_position
    type: float
  - id: closed_potentiometer_position
    type: float
  - id: opened_position
    type: float
  - id: opened_potentiometer_position
    type: float

  - id: position_error_tolerance
    type: float
    initial_value: '0.00125'
  - id: original_position_error_tolerance
    type: float
    initial_value: '0.00125'
  - id: position_error_tolerance_multiplier
    type: float
    initial_value: '1.26'

  - id: distance_to_back_off
    type: float
    initial_value: '0.20'
  - id: original_distance_to_back_off
    type: float
    initial_value: '0.20'
  - id: decrease_per_loop
    type: float
    initial_value: '0.04'

esp8266:
  board: d1_mini

esphome:
  name: yet-another-smart-vent
  name_add_mac_suffix: true
  project:
    name: esphome.project-template
    version: "1.0"
  on_boot:
    priority: -100
    then:
    - script.execute: calibrate_close
    - script.wait: calibrate_close
    - script.execute: calibrate_open
    - script.wait: calibrate_open
    - logger.log:
        format: "closed_potentiometer_position: %f | closed_position: %f | opened_potentiometer_position: %f | opened_position: %f"
        args: ['id(closed_potentiometer_position)', 'id(closed_position)', 'id(opened_potentiometer_position)', 'id(opened_position)']
        level: INFO

script:
  - id: calibrate_close
    then:
      - script.execute: reset_position_error_tolerance
      - script.wait: reset_position_error_tolerance
      - script.execute: reset_distance_to_back_off
      - script.wait: reset_distance_to_back_off
      - script.execute: move_servo_to_zero
      - script.wait: move_servo_to_zero
      - script.execute: find_close_endstop
      - script.wait: find_close_endstop
      - while:
          condition:
            lambda: 'return id(distance_to_back_off) >= 0;'
          then:
            - globals.set:
                id: position_to_move_servo_to
                value: !lambda 'return id(closed_position) - id(distance_to_back_off);'
            - globals.set:
                id: max_closed_position
                value: !lambda 'return id(original_max_closed_position);'
            - globals.set:
                id: position_error_tolerance
                value: !lambda 'return id(position_error_tolerance) * id(position_error_tolerance_multiplier);'
            - script.execute: move_servo_to_position
            - script.wait: move_servo_to_position
            - script.execute: find_close_endstop
            - script.wait: find_close_endstop
            - globals.set:
                id: distance_to_back_off
                value: !lambda 'return id(distance_to_back_off) - id(decrease_per_loop);'
  - id: calibrate_open
    then:
      - script.execute: reset_position_error_tolerance
      - script.wait: reset_position_error_tolerance
      - script.execute: reset_distance_to_back_off
      - script.wait: reset_distance_to_back_off
      - script.execute: move_servo_to_zero
      - script.wait: move_servo_to_zero
      - script.execute: find_open_endstop
      - script.wait: find_open_endstop
      - while:
          condition:
            lambda: 'return id(distance_to_back_off) >= 0;'
          then:
            - globals.set:
                id: position_to_move_servo_to
                value: !lambda 'return id(opened_position) + id(distance_to_back_off);'
            - globals.set:
                id: max_opened_position
                value: !lambda 'return id(original_max_opened_position);'
            - globals.set:
                id: position_error_tolerance
                value: !lambda 'return id(position_error_tolerance) * id(position_error_tolerance_multiplier);'
            - script.execute: move_servo_to_position
            - script.wait: move_servo_to_position
            - script.execute: find_open_endstop
            - script.wait: find_open_endstop
            - globals.set:
                id: distance_to_back_off
                value: !lambda 'return id(distance_to_back_off) - id(decrease_per_loop);'
  - id: find_close_endstop
    then:
      - while:
          condition:
            lambda: 'return id(position_to_move_servo_to) < id(max_closed_position);'
          then:
            - script.execute: increment_position_to_move_servo_to
            - script.wait: increment_position_to_move_servo_to
            - script.execute: move_servo_to_position
            - script.wait: move_servo_to_position
            - script.execute: update_potentiometer_values
            - script.wait: update_potentiometer_values
            - if:
                condition:
                  lambda: |-
                      return id(previous_potentiometer_value1) >= id(lower_previous_potentiometer_value2) 
                        && id(previous_potentiometer_value1) <= id(upper_previous_potentiometer_value2)
                        && id(previous_potentiometer_value1) >= id(lower_previous_potentiometer_value3) 
                        && id(previous_potentiometer_value1) <= id(upper_previous_potentiometer_value3);
                then: 
                  - script.execute: break_and_set_closed_positions
                  - script.wait: break_and_set_closed_positions
      - script.execute: set_closed_positions_if_not_set
      - script.wait: set_closed_positions_if_not_set
      - script.execute: reset_servo_position_values
      - script.wait: reset_servo_position_values
      - servo.detach: vent_servo
  - id: find_open_endstop
    then:
      - while:
          condition:
            lambda: 'return id(position_to_move_servo_to) > id(max_opened_position);'
          then:
            - script.execute: decrement_position_to_move_servo_to
            - script.wait: decrement_position_to_move_servo_to
            - script.execute: move_servo_to_position
            - script.wait: move_servo_to_position
            - script.execute: update_potentiometer_values
            - script.wait: update_potentiometer_values
            - if:
                condition:
                  lambda: |-
                      return id(previous_potentiometer_value1) >= id(lower_previous_potentiometer_value2) 
                        && id(previous_potentiometer_value1) <= id(upper_previous_potentiometer_value2)
                        && id(previous_potentiometer_value1) >= id(lower_previous_potentiometer_value3) 
                        && id(previous_potentiometer_value1) <= id(upper_previous_potentiometer_value3);
                then: 
                  - script.execute: break_and_set_opened_positions
                  - script.wait: break_and_set_opened_positions
      - script.execute: set_opened_positions_if_not_set
      - script.wait: set_opened_positions_if_not_set
      - script.execute: reset_servo_position_values
      - script.wait: reset_servo_position_values
      - servo.detach: vent_servo
  - id: move_servo_to_position
    then:
      - servo.write:
          id: vent_servo
          level: !lambda 'return id(position_to_move_servo_to);'
      - delay: 75ms
  - id: move_servo_to_zero
    then:
      - globals.set:
          id: position_to_move_servo_to
          value: '0'
      - script.execute: move_servo_to_position
      - script.wait: move_servo_to_position
      - delay: 150ms
  - id: increment_position_to_move_servo_to
    then:
      - globals.set:
          id: position_to_move_servo_to
          value: !lambda 'return id(position_to_move_servo_to) + id(servo_distance_to_move);'
  - id: decrement_position_to_move_servo_to
    then:
      - globals.set:
          id: position_to_move_servo_to
          value: !lambda 'return id(position_to_move_servo_to) - id(servo_distance_to_move);'
  - id: update_potentiometer_values
    then:
      - globals.set:
          id: previous_potentiometer_value3
          value: !lambda 'return id(previous_potentiometer_value2);'
      - globals.set:
          id: upper_previous_potentiometer_value3
          value: !lambda 'return id(previous_potentiometer_value3) + id(position_error_tolerance);'
      - globals.set:
          id: lower_previous_potentiometer_value3
          value: !lambda 'return id(previous_potentiometer_value3) - id(position_error_tolerance);'
      - globals.set:
          id: previous_potentiometer_value2
          value: !lambda 'return id(previous_potentiometer_value1);'
      - globals.set:
          id: upper_previous_potentiometer_value2
          value: !lambda 'return id(previous_potentiometer_value2) + id(position_error_tolerance);'
      - globals.set:
          id: lower_previous_potentiometer_value2
          value: !lambda 'return id(previous_potentiometer_value2) - id(position_error_tolerance);'
      - globals.set:
          id: previous_potentiometer_value1
          value: !lambda 'return id(vent_servo_potentiometer).sample();'
  - id: break_and_set_closed_positions
    then:
        - globals.set:
            id: max_closed_position
            value: !lambda 'return id(position_to_move_servo_to);'
        - globals.set:
            id: closed_position
            value: !lambda 'return id(position_to_move_servo_to) - (id(servo_distance_to_move) * 2);'
        - globals.set:
            id: closed_potentiometer_position
            value: !lambda 'return id(previous_potentiometer_value3);'
  - id: break_and_set_opened_positions
    then:
        - globals.set:
            id: max_opened_position
            value: !lambda 'return id(position_to_move_servo_to);'
        - globals.set:
            id: opened_position
            value: !lambda 'return id(position_to_move_servo_to) + (id(servo_distance_to_move) * 2);'
        - globals.set:
            id: opened_potentiometer_position
            value: !lambda 'return id(previous_potentiometer_value3);'
  - id: set_closed_positions_if_not_set
    then:
      - if:
          condition:
            lambda: 'return id(closed_position) == 0 && id(closed_potentiometer_position) == 0;'
          then:
            - globals.set:
                id: closed_position
                value: !lambda 'return id(position_to_move_servo_to);'
            - globals.set:
                id: closed_potentiometer_position
                value: !lambda 'return id(previous_potentiometer_value1);'
  - id: set_opened_positions_if_not_set
    then:
      - if:
          condition:
            lambda: 'return id(opened_position) == 0 && id(opened_potentiometer_position) == 0;'
          then: 
            - globals.set:
                id: opened_position
                value: !lambda 'return id(position_to_move_servo_to);'
            - globals.set:
                id: opened_potentiometer_position
                value: !lambda 'return id(previous_potentiometer_value1);'
  - id: reset_servo_position_values
    then:
      - globals.set:
          id: previous_potentiometer_value3
          value: '0'
      - globals.set:
          id: upper_previous_potentiometer_value3
          value: '0'
      - globals.set:
          id: lower_previous_potentiometer_value3
          value: '0'
      - globals.set:
          id: previous_potentiometer_value2
          value: '0'
      - globals.set:
          id: upper_previous_potentiometer_value2
          value: '0'
      - globals.set:
          id: lower_previous_potentiometer_value2
          value: '0'
      - globals.set:
          id: previous_potentiometer_value1
          value: '0'
  - id: reset_position_error_tolerance
    then:
      - globals.set:
          id: position_error_tolerance
          value: !lambda 'return id(original_position_error_tolerance);'
  - id: reset_distance_to_back_off
    then:
      - globals.set:
          id: distance_to_back_off
          value: !lambda 'return id(original_distance_to_back_off);'

cover:
  - platform: template
    device_class: damper
    id: vent
    name: Vent
    open_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return id(opened_position);'
    close_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return id(closed_position);'
    stop_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return remap(id(vent_servo_potentiometer).state, id(opened_potentiometer_position), id(closed_potentiometer_position), id(opened_position), id(closed_position));'
    tilt_action:
      - servo.write:
          id: vent_servo
          level: !lambda 'return remap(tilt, float(1), float(0), id(opened_position), id(closed_position));'
    tilt_lambda: !lambda 'return remap(id(vent_servo_potentiometer).state, id(opened_potentiometer_position), id(closed_potentiometer_position), float(1), float(0));'
    lambda: |-
      const float current_position = id(vent_servo_potentiometer).state;
      const float closed_position = id(closed_potentiometer_position);
      const float tolerance = 0.015;
      const float upper_tolerance = closed_position + tolerance;
      const float lower_tolerance = closed_position - tolerance;
      if (current_position >= lower_tolerance && current_position <= upper_tolerance) {
        return COVER_CLOSED;
      }
      return COVER_OPEN;

sensor:
  - platform: adc
    id: vent_servo_potentiometer
    pin: A0
    update_interval: 250ms

servo:
  - id: vent_servo
    output: vent_servo_output
    transition_length: 3s
    auto_detach_time: 200ms

output:
  - platform: esp8266_pwm
    id: vent_servo_output
    pin: D3
    frequency: 50 Hz
    
dashboard_import:
  package_import_url: github://brobstoncreations/yet-another-smart-vent/yet-another-smart-vent.yaml

captive_portal:

wifi:
  ap: {}
  # ssid: !secret wifi_ssid
  # password: !secret wifi_password
  # manual_ip:
  #   static_ip: !secret static_ip
  #   gateway: !secret gateway
  #   subnet: !secret subnet

# mqtt:
#   broker: !secret mqtt_broker
#   username: !secret mqtt_username
#   password: !secret mqtt_password

web_server:

api:

mdns:
    
ota:

logger:
  level: INFO
